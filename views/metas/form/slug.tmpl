{{$slugSuffix := "WithSlug"}}
{{$syncSuffix := "SyncWithSlug"}}
{{$slugMeta := .Base.GetMeta (print .Meta.Name "WithSlug") }}
{{$slugValue := (value_of .Result $slugMeta).Slug}}

<div class="qor-field" data-sluggable="true">
  <div class="mdl-textfield mdl-textfield--full-width mdl-js-textfield qor-textfield--static-label">
    <input class="mdl-textfield__input" data-sluggable-role="source" type="text" id="{{.InputId}}" name="{{.InputName}}" {{if .Value}}value="{{.Value}}"{{end}} {{if not (has_update_permission .Meta)}}disabled{{end}}>
    <label class="mdl-textfield__label" for="{{.InputId}}">{{dt (printf "%v.attributes.%v" .Base.ToParam .Label) .Label}}</label>
  </div>

  <div class="mdl-textfield mdl-textfield--full-width mdl-js-textfield qor-textfield--static-label">
    <input class="mdl-textfield__input" data-sluggable-role="slug" type="text" id="{{.InputId}}{{$slugSuffix}}" name="{{.InputName}}{{$slugSuffix}}" {{if $slugValue}}value="{{$slugValue}}"{{end}} {{if not (has_update_permission $slugMeta)}}disabled{{end}}>
  </div>

  <label class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect" for="{{.InputId}}{{$syncSuffix}}">
    <input type="checkbox" id="{{.InputId}}{{$syncSuffix}}" class="mdl-checkbox__input" data-sluggable-role="sync" value="true" type="checkbox" {{if is_new_record .Result}}checked{{end}} {{if not (has_update_permission $slugMeta)}}disabled{{end}}>
    <span class="mdl-checkbox__label">{{t "Sync"}}</span>
  </label>
</div>

<script>
  !(function() {
    (function($, Export) {
      "use script";

      var Slug = {
        Parameterize : function(str, sep) {
          var parameterizedStr = str.replace(/[^a-z0-9\-_]+/gi, sep)

          if (sep != "") {
            // No more than one of the separator in a row.
            parameterizedStr = parameterizedStr.replace(new RegExp(sep + '{2, }', 'g'), sep)
            // Remove leading/trailing separator.
            parameterizedStr = parameterizedStr.replace(new RegExp('^' + sep + '|' + sep + '$', 'g'), '')
          }

          return parameterizedStr.toLowerCase()
        }
      };

      var testParameterize = function() {
        var cases = [
          {in: "This is an blog title", want:"this-is-an-blog-title"},
          {in: " This is an blog title with spaces  ", want:"this-is-an-blog-title-with-spaces"},
          {in: "Donald E. Knuth", want:"donald-e-knuth"},
          {in: "Two  More   Spaces", want:"two-more-spaces"},
          {in: "这是一个标题", want:""},
        ]

        for (var i = 0; i < cases.length; i++) {
          var c = cases[i];
          var got = Slug.Parameterize(c.in, "-");
          if (got != c.want) {
            throw new Error('got Slug.Parameterize("' + c.in + '") = "' + got + '", want "' + c.want + '"');
          }
        }
      };

      testParameterize();
      Export.Slug = Slug;

    })(jQuery, window);
  }).call(this);

  $(function() {
    $('[data-sluggable="true"]').each(function(i, e) {
      var $container = $(e);

      $container.bind('sluggable.change', function() {
        var $source = $container.find('[data-sluggable-role="source"]'),
          $slug = $container.find('[data-sluggable-role="slug"]'),
          $sync = $container.find('[data-sluggable-role="sync"]');

        if ($sync.is(':checked')) {
          $slug.val(Slug.Parameterize($source.val(), '-'))
        }
      });

      $container.find('[data-sluggable-role="source"]').on("keyup change", function() {
        $(this).parents('[data-sluggable="true"]').trigger('sluggable.change');
      })
      $container.find('[data-sluggable-role="sync"]').on("change", function() {
        $(this).parents('[data-sluggable="true"]').trigger('sluggable.change');
      })
      $container.trigger('sluggable.change');
    });
  })
</script>
